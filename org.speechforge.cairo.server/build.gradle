apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'application'

repositories {
    mavenCentral()
    maven { 
        url "https://oss.sonatype.org/content/repositories/snapshots" 
    }
    maven { 
        url "https://repo.spring.io/plugins-release/"
    }
}

dependencies {
    compile group: 'org.jvoicexml', name: 'org.mrcp4j', version: '0.3-SNAPSHOT'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    compile group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '1.13.1'
    compile group: 'de.dfki.mary', name: 'marytts-client', version: '5.2'
    compile group: 'javax.media', name: 'jmf', version: '2.1.1e'
    compile group: 'edu.cmu.sphinx', name: 'sphinx4-core', version: '5prealpha-SNAPSHOT'
    compile group: 'edu.cmu.sphinx', name: 'sphinx4-data', version: '5prealpha-SNAPSHOT'
    compile fileTree(dir: "./lib", include: ['*.jar'])
    compile group: 'org.mobicents.external.freetts', name: 'freetts', version: '1.0'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.6'
    compile group: 'commons-pool', name: 'commons-pool', version: '1.3'
    compile group: 'javax.sip', name: 'jain-sip-api', version: '1.2.1.4'
    compile group: 'javax.sip', name: 'jain-sip-ri', version: '1.3.0-91'
    compile group: 'javax.sdp', name: 'nist-sdp', version: '1.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.3'
    compile project(':org.speechforge.cairo.rtp')
    compile project(':org.speechforge.cairo.sip')
    
    testCompile group: 'junit', name: 'junit', version: '4.13.1'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}


jar {
    manifest {
        attributes('Implementation-Title': 'Cairo sets out to provide an enterprise grade, MRCPv2 compliant speech solution utilizing existing open source speech resources.',
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': version,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.speechforge.cairo.server'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { 
                MavenDeployment deployment -> signing.signPom(deployment) 
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: JVOICEXML_OSSRH_USERNAME, password: JVOICEXML_OSSRH_PASSWORD)
            }
    
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: JVOICEXML_OSSRH_USERNAME, password: JVOICEXML_OSSRH_PASSWORD)
            }
    
            pom.project {
                name 'org.speechforge.cairo.server'
                groupId = JVOICEXML_GROUP
                packaging 'jar'
                description 'Cairo sets out to provide an enterprise grade, MRCPv2 compliant speech solution utilizing existing open source speech resources.'
                url 'https://github.com/JVoiceXML/cairo'
                
                scm {
                    connection 'git@github.com:JVoiceXML/cairo.git'
                    developerConnection 'git@github.com:JVoiceXML/cairo.git'
                    url "https://github.com/JVoiceXML/JVoiceXML/tree/release/${version}"
                }
                    
                licenses {
                    license {
                        name 'GNU Lesser General Public License, Version 2.1'
                        url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
    
                developers {
                    developer {
                        id 'schnelle'
                        name 'Dirk Schnelle-Walka'
                        email 'dirk.schnelle@jvoicexml.org'
                    }
                }
            }
        }
    }
}

run {
    dependsOn jar
    
    mainClassName = "org.speechforge.cairo.server.resource.ResourceServerImpl"
    classpath = sourceSets.main.runtimeClasspath \
                + files("${project.rootDir}/config-template")
    jvmArgs = ["-Xmx2048m",
               "-XX:+UseConcMarkSweepGC",
               "-Dsun.rmi.dgc.client.gcInterval=3600000",
               "-Dsun.rmi.dgc.server.gcInterval=3600000"]
    args = ["--sipPort=15050",
            "--sipTransport=udp"]
}


task(runDebug, type: JavaExec) {
    dependsOn jar
    
    main = "org.speechforge.cairo.server.resource.ResourceServerImpl"
    classpath = sourceSets.main.runtimeClasspath \
                + files("${project.rootDir}/config-template")
    jvmArgs = ["-Xmx2048m",
               "-XX:+UseConcMarkSweepGC",
               "-Dsun.rmi.dgc.client.gcInterval=3600000",
               "-Dsun.rmi.dgc.server.gcInterval=3600000",
               "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,address=12368" ]
    args = ["--sipPort=15050",
            "--sipTransport=udp"]
}

task(runReceiver, type: JavaExec) {
    dependsOn jar
    
    main = "org.speechforge.cairo.server.resource.ReceiverResource"
    classpath = sourceSets.main.runtimeClasspath \
                + files("${project.rootDir}/config-template")
    jvmArgs = ["-Xmx2048m",
               "-XX:+UseConcMarkSweepGC",
               "-Dsun.rmi.dgc.client.gcInterval=3600000",
               "-Dsun.rmi.dgc.server.gcInterval=3600000"]
    args = ["file:${buildDir}/resources/main/config/cairo-config.xml",
            "receiver1"]
}

task(runTransmitter, type: JavaExec) {
    dependsOn jar
    
    main = "org.speechforge.cairo.server.resource.TransmitterResource"
    classpath = sourceSets.main.runtimeClasspath \
                + files("${project.rootDir}/config-template")
    jvmArgs = ["-Xmx2048m",
               "-XX:+UseConcMarkSweepGC",
               "-Dsun.rmi.dgc.client.gcInterval=3600000",
               "-Dsun.rmi.dgc.server.gcInterval=3600000"]
    args = ["file:${buildDir}/resources/main/config/cairo-config.xml",
            "transmitter1"]
}
