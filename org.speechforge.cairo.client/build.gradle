plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
    maven { 
        url "https://oss.sonatype.org/content/repositories/snapshots" 
    }
}

dependencies {
    api group: 'org.jvoicexml', name: 'org.mrcp4j', version: '0.3-SNAPSHOT'
    api group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.17.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.17.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.1'
    api group: 'javax.sip', name: 'jain-sip-api', version: '1.2.1.4'
    api group: 'javax.sip', name: 'jain-sip-ri', version: '1.3.0-91'
    api group: 'javax.sdp', name: 'nist-sdp', version: '1.0'
    api group: 'javax.media', name: 'jmf', version: '2.1.1e'
    api group: 'commons-cli', name: 'commons-cli', version: '1.4'
    api project(':org.speechforge.cairo.sip')
    api project(':org.speechforge.cairo.rtp')
    
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

}

jar {
    manifest {
        attributes('Implementation-Title': 'The module that provides client side mrcpv2 capabilities for speech recognition applications',
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': version,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.speechforge.cairo.client'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = tasks.jar.baseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Cairo Client'
                description = 'The module that provides client side mrcpv2 capabilities for speech recognition applications'
                url = 'https://github.com/JVoiceXML/cairo'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'schnelle'
                        name = 'Dirk Schnelle-Walka'
                        email = 'dirk.schnelle@jvoicexml.org'
                    }
                }
                scm {
                    connection = 'git@github.com:JVoiceXML/cairo.git'
                    developerConnection = 'git@github.com:JVoiceXML/cairo.git'
                    url = 'https://github.com/JVoiceXML/cairo'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/" 
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = JVOICEXML_OSSRH_USERNAME
                password = JVOICEXML_OSSRH_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
